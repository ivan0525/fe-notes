import{o as n,c as s,a}from"./app.d9954252.js";const t='{"title":"Javascript相关","description":"","frontmatter":{"pageClass":"custom-page-class"},"headers":[{"level":2,"title":"1. 设计模式","slug":"_1-设计模式"},{"level":3,"title":"1.1 发布订阅（观察者模式）","slug":"_1-1-发布订阅（观察者模式）"},{"level":2,"title":"2. 常用工具函数","slug":"_2-常用工具函数"},{"level":3,"title":"2.1 防抖函数","slug":"_2-1-防抖函数"},{"level":3,"title":"2.2 Object.is polyfill","slug":"_2-2-object-is-polyfill"},{"level":2,"title":"3. 源码解析","slug":"_3-源码解析"},{"level":3,"title":"3.1 React源码解析","slug":"_3-1-react源码解析"}],"relativePath":"js/index.md","lastUpdated":1622649374549}',p={},o=a('<h1 id="javascript相关"><a class="header-anchor" href="#javascript相关" aria-hidden="true">#</a> Javascript相关</h1><h2 id="_1-设计模式"><a class="header-anchor" href="#_1-设计模式" aria-hidden="true">#</a> 1. 设计模式</h2><h3 id="_1-1-发布订阅（观察者模式）"><a class="header-anchor" href="#_1-1-发布订阅（观察者模式）" aria-hidden="true">#</a> 1.1 发布订阅（观察者模式）</h3><div class="language-js"><pre><code><span class="token keyword">const</span> Event <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> clientList <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    listen<span class="token punctuation">,</span>\n    trigger<span class="token punctuation">,</span>\n    remove<span class="token punctuation">;</span>\n  <span class="token function-variable function">listen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">trigger</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      fns <span class="token operator">=</span> clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fns <span class="token operator">||</span> fns<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> fns <span class="token operator">=</span> clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fns<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      fns <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fns<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> fns<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> _fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>_fn <span class="token operator">===</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    listen<span class="token punctuation">,</span>\n    trigger<span class="token punctuation">,</span>\n    remove\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nEvent<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">&#39;SquareMeter88&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//订阅消息</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">价格= </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>price<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// log: &#39;价格= 1999999&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nEvent<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;SquareMeter88&#39;</span><span class="token punctuation">,</span> <span class="token number">1999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发布消息</span>\n</code></pre></div><h2 id="_2-常用工具函数"><a class="header-anchor" href="#_2-常用工具函数" aria-hidden="true">#</a> 2. 常用工具函数</h2><h3 id="_2-1-防抖函数"><a class="header-anchor" href="#_2-1-防抖函数" aria-hidden="true">#</a> 2.1 防抖函数</h3><blockquote><p>防抖：让高频执行的动作在单位时间内只会执行一次，也就是说如果该动作在单位时间内再次触发，则重新就算时间。</p></blockquote><div class="language-ts"><pre><code><span class="token comment">/**\n * @description 防抖函数\n * @param {Function} func 需要包装的函数\n * @param {Number} delay 延迟时间，单位ms\n * @param {Boolean} immediate 是否立即执行\n * @returns {Function}\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> debounce <span class="token operator">=</span> <span class="token punctuation">(</span>\n  func<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span>\n  delay <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span>\n  immediate <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timeout<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> setTimeout<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token keyword">let</span> args<span class="token operator">:</span> <span class="token builtin">any</span>\n  <span class="token keyword">let</span> context<span class="token operator">:</span> <span class="token builtin">any</span>\n  <span class="token keyword">let</span> timestamp<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token builtin">Function</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当前的时间戳与上一个时间戳做对比</span>\n    <span class="token keyword">const</span> left <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timestamp\n    <span class="token comment">// 如果当前时间间隔小于设置的延迟时间且大于0就重置定时器</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> delay <span class="token operator">&amp;&amp;</span> left <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> delay <span class="token operator">-</span> left<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 清除定时器，执行回调</span>\n      timeout <span class="token operator">=</span> <span class="token keyword">null</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n        result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          context <span class="token operator">=</span> <span class="token keyword">null</span>\n          args <span class="token operator">=</span> <span class="token keyword">null</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    args <span class="token operator">=</span> arguments\n    <span class="token comment">// 获得时间戳</span>\n    timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 如果定时器不存在且立即执行函数</span>\n    <span class="token keyword">var</span> callNow <span class="token operator">=</span> immediate <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timeout\n    <span class="token comment">// 如果定时器不存在就创建一个</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果需要立即执行函数的话 通过 apply 执行</span>\n      result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n      context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_2-2-object-is-polyfill"><a class="header-anchor" href="#_2-2-object-is-polyfill" aria-hidden="true">#</a> 2.2 <code>Object.is</code> polyfill</h3><blockquote><p><code>Object.is</code> 方法用来判断两个值是否是同一个。（该方法与<code>===</code>几乎相同，区别在于前者对<code>NaN</code>和<code>+0</code>和<code>-0</code>进行了特殊处理）。</p></blockquote><div class="language-js"><pre><code><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span> <span class="token comment">// false</span>\n<span class="token operator">-</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">+</span><span class="token number">0</span> <span class="token comment">// true</span>\n<span class="token number">1</span><span class="token operator">/</span><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token number">Infinity</span>\n<span class="token number">1</span><span class="token operator">/</span><span class="token operator">-</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">Infinity</span>\n<span class="token number">Infinity</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">Infinity</span> <span class="token comment">// false</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">/**\n * polyfill Object.is\n * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n * @param {*} x \n * @param {*} y \n * @returns \n */</span>\n<span class="token keyword">function</span> <span class="token function">is</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> y <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">/</span> x <span class="token operator">!==</span> <span class="token number">1</span> <span class="token operator">/</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> x <span class="token operator">&amp;&amp;</span> y <span class="token operator">!==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">objectIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> Object<span class="token punctuation">.</span>is <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> Object<span class="token punctuation">.</span>is <span class="token operator">:</span> is<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div><h2 id="_3-源码解析"><a class="header-anchor" href="#_3-源码解析" aria-hidden="true">#</a> 3. 源码解析</h2><h3 id="_3-1-react源码解析"><a class="header-anchor" href="#_3-1-react源码解析" aria-hidden="true">#</a> 3.1 React源码解析</h3><div class="language-md"><pre><code><span class="token list punctuation">-</span> Example-1\n\n<span class="token code"><span class="token punctuation">```</span><span class="token code-language">ts</span>\n<span class="token code-block language-ts"><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>\n<span class="token punctuation">```</span></span>\n\n上例中的<span class="token code keyword">`useState`</span>的初始化是在<span class="token code keyword">`packages/react-reconciler/src/ReactFiberHooks.new.js`</span>中：\n\n<span class="token code"><span class="token punctuation">```</span><span class="token code-language">ts</span>\n<span class="token code-block language-ts"><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">mountState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  initialState<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token constant">S</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span>BasicStateAction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">mountWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// useState传入的参数为函数，则执行该函数得出state，然后赋值给initialState</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> initialState <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// $FlowFixMe: Flow doesn&#39;t like mixed types</span>\n    initialState <span class="token operator">=</span> <span class="token function">initialState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> hook<span class="token punctuation">.</span>baseState <span class="token operator">=</span> initialState<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">(</span>hook<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">{</span>\n    pending<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    interleaved<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    lanes<span class="token operator">:</span> NoLanes<span class="token punctuation">,</span>\n    dispatch<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    lastRenderedReducer<span class="token operator">:</span> basicStateReducer<span class="token punctuation">,</span>\n    lastRenderedState<span class="token operator">:</span> <span class="token punctuation">(</span>initialState<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> dispatch<span class="token operator">:</span> Dispatch<span class="token operator">&lt;</span>\n    BasicStateAction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  <span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>dispatch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">dispatchAction</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>\n    <span class="token keyword">null</span><span class="token punctuation">,</span>\n    currentlyRenderingFiber<span class="token punctuation">,</span>\n    queue<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Example-1中的setCount其实就是dispatchAction</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">mountWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Hook <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> hook<span class="token operator">:</span> Hook <span class="token operator">=</span> <span class="token punctuation">{</span>\n    memoizedState<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n\n    baseState<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    baseQueue<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 最新的状态信息</span>\n    queue<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 保持待更新的队列</span>\n\n    next<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 指向下一个hook对象</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>workInProgressHook <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// This is the first hook in the list</span>\n    currentlyRenderingFiber<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> workInProgressHook <span class="token operator">=</span> hook<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Append to the end of the list</span>\n    workInProgressHook <span class="token operator">=</span> workInProgressHook<span class="token punctuation">.</span>next <span class="token operator">=</span> hook<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> workInProgressHook<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></span>\n<span class="token punctuation">```</span></span>\n\n\n\n<span class="token code"><span class="token punctuation">```</span><span class="token code-language">js</span>\n<span class="token code-block language-js"><span class="token keyword">function</span> dispatchAction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  fiber<span class="token operator">:</span> Fiber<span class="token punctuation">,</span>\n  queue<span class="token operator">:</span> UpdateQueue<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  action<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在开发环境下，如果&#39;setXXX&#39;第三个参数传入了一个回调，会有错误提示；</span>\n    <span class="token comment">// 如果想拿到更新的状态去做其他事情，可以通过第一个参数传入一个函数，拿到最新的状态，然后做其他事情；</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>\n        <span class="token string">&quot;State updates from the useState() and useReducer() Hooks don&#39;t support the &quot;</span> <span class="token operator">+</span>\n          <span class="token string">&#39;second callback argument. To execute a side effect after &#39;</span> <span class="token operator">+</span>\n          <span class="token string">&#39;rendering, declare it in the component body with useEffect().&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> eventTime <span class="token operator">=</span> <span class="token function">requestEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> lane <span class="token operator">=</span> <span class="token function">requestUpdateLane</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> update<span class="token operator">:</span> Update<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    lane<span class="token punctuation">,</span>\n    action<span class="token punctuation">,</span>\n    eagerReducer<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    eagerState<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    next<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> alternate <span class="token operator">=</span> fiber<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    fiber <span class="token operator">===</span> currentlyRenderingFiber <span class="token operator">||</span>\n    <span class="token punctuation">(</span>alternate <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> alternate <span class="token operator">===</span> currentlyRenderingFiber<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// This is a render phase update. Stash it in a lazily-created map of</span>\n    <span class="token comment">// queue -&gt; linked list of updates. After this render pass, we&#39;ll restart</span>\n    <span class="token comment">// and apply the stashed updates on top of the work-in-progress hook.</span>\n    didScheduleRenderPhaseUpdateDuringThisPass <span class="token operator">=</span> didScheduleRenderPhaseUpdate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> pending <span class="token operator">=</span> queue<span class="token punctuation">.</span>pending<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>pending <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// This is the first update. Create a circular list.</span>\n      update<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      update<span class="token punctuation">.</span>next <span class="token operator">=</span> pending<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n      pending<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    queue<span class="token punctuation">.</span>pending <span class="token operator">=</span> update<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInterleavedUpdate</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> interleaved <span class="token operator">=</span> queue<span class="token punctuation">.</span>interleaved<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>interleaved <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// This is the first update. Create a circular list.</span>\n        update<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>\n        <span class="token comment">// At the end of the current render, this queue&#39;s interleaved updates will</span>\n        <span class="token comment">// be transfered to the pending queue.</span>\n        <span class="token function">pushInterleavedQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        update<span class="token punctuation">.</span>next <span class="token operator">=</span> interleaved<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        interleaved<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      queue<span class="token punctuation">.</span>interleaved <span class="token operator">=</span> update<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> pending <span class="token operator">=</span> queue<span class="token punctuation">.</span>pending<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>pending <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// This is the first update. Create a circular list.</span>\n        update<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        update<span class="token punctuation">.</span>next <span class="token operator">=</span> pending<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        pending<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      queue<span class="token punctuation">.</span>pending <span class="token operator">=</span> update<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      fiber<span class="token punctuation">.</span>lanes <span class="token operator">===</span> NoLanes <span class="token operator">&amp;&amp;</span>\n      <span class="token punctuation">(</span>alternate <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> alternate<span class="token punctuation">.</span>lanes <span class="token operator">===</span> NoLanes<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// The queue is currently empty, which means we can eagerly compute the</span>\n      <span class="token comment">// next state before entering the render phase. If the new state is the</span>\n      <span class="token comment">// same as the current state, we may be able to bail out entirely.</span>\n      <span class="token keyword">const</span> lastRenderedReducer <span class="token operator">=</span> queue<span class="token punctuation">.</span>lastRenderedReducer<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRenderedReducer <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> prevDispatcher<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          prevDispatcher <span class="token operator">=</span> ReactCurrentDispatcher<span class="token punctuation">.</span>current<span class="token punctuation">;</span>\n          ReactCurrentDispatcher<span class="token punctuation">.</span>current <span class="token operator">=</span> InvalidNestedHooksDispatcherOnUpdateInDEV<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> currentState<span class="token operator">:</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>lastRenderedState<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">const</span> eagerState <span class="token operator">=</span> <span class="token function">lastRenderedReducer</span><span class="token punctuation">(</span>currentState<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">// Stash the eagerly computed state, and the reducer used to compute</span>\n          <span class="token comment">// it, on the update object. If the reducer hasn&#39;t changed by the</span>\n          <span class="token comment">// time we enter the render phase, then the eager state can be used</span>\n          <span class="token comment">// without calling the reducer again.</span>\n          update<span class="token punctuation">.</span>eagerReducer <span class="token operator">=</span> lastRenderedReducer<span class="token punctuation">;</span>\n          update<span class="token punctuation">.</span>eagerState <span class="token operator">=</span> eagerState<span class="token punctuation">;</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is</span><span class="token punctuation">(</span>eagerState<span class="token punctuation">,</span> currentState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Fast path. We can bail out without scheduling React to re-render.</span>\n            <span class="token comment">// It&#39;s still possible that we&#39;ll need to rebase this update later,</span>\n            <span class="token comment">// if the component re-renders for a different reason and by that</span>\n            <span class="token comment">// time the reducer has changed.</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// Suppress the error. It will throw again in the render phase.</span>\n        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            ReactCurrentDispatcher<span class="token punctuation">.</span>current <span class="token operator">=</span> prevDispatcher<span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// $FlowExpectedError - jest isn&#39;t a global, and isn&#39;t recognized outside of tests</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;undefined&#39;</span> <span class="token operator">!==</span> <span class="token keyword">typeof</span> jest<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">warnIfNotScopedWithMatchingAct</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">warnIfNotCurrentlyActingUpdatesInDev</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTransitionLane</span><span class="token punctuation">(</span>lane<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> root <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> queueLanes <span class="token operator">=</span> queue<span class="token punctuation">.</span>lanes<span class="token punctuation">;</span>\n\n      <span class="token comment">// If any entangled lanes are no longer pending on the root, then they</span>\n      <span class="token comment">// must have finished. We can remove them from the shared queue, which</span>\n      <span class="token comment">// represents a superset of the actually pending lanes. In some cases we</span>\n      <span class="token comment">// may entangle more than we need to, but that&#39;s OK. In fact it&#39;s worse if</span>\n      <span class="token comment">// we *don&#39;t* entangle when we should.</span>\n      queueLanes <span class="token operator">=</span> <span class="token function">intersectLanes</span><span class="token punctuation">(</span>queueLanes<span class="token punctuation">,</span> root<span class="token punctuation">.</span>pendingLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// Entangle the new transition lane with the other transition lanes.</span>\n      <span class="token keyword">const</span> newQueueLanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>queueLanes<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      queue<span class="token punctuation">.</span>lanes <span class="token operator">=</span> newQueueLanes<span class="token punctuation">;</span>\n      <span class="token comment">// Even if queue.lanes already include lane, we don&#39;t know for certain if</span>\n      <span class="token comment">// the lane finished since the last time we entangled it. So we need to</span>\n      <span class="token comment">// entangle it again, just to be sure.</span>\n      <span class="token function">markRootEntangled</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> newQueueLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>enableDebugTracing<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>mode <span class="token operator">&amp;</span> DebugTracingMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getComponentNameFromFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;Unknown&#39;</span><span class="token punctuation">;</span>\n        <span class="token function">logStateUpdateScheduled</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>enableSchedulingProfiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">markStateUpdateScheduled</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></span>\n<span class="token punctuation">```</span></span>\n\n</code></pre></div>',15);p.render=function(a,t,p,e,c,u){return n(),s("div",null,[o])};export default p;export{t as __pageData};
