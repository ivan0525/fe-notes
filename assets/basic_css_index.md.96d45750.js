import{o as e,c as i,a as d}from"./app.026dfc65.js";const s='{"title":"CSS相关","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. display: none;和visibility: hidden;的区别？","slug":"_1-display-none-和visibility-hidden-的区别？"},{"level":2,"title":"2. 浮动元素引起的问题","slug":"_2-浮动元素引起的问题"},{"level":2,"title":"3. CSS优化、提高性能的方法有哪些？","slug":"_3-css优化、提高性能的方法有哪些？"},{"level":2,"title":"4. 浏览器是怎样解析CSS选择器的？","slug":"_4-浏览器是怎样解析css选择器的？"}],"relativePath":"basic/css/index.md","lastUpdated":1621482303902}',l={},c=d('<h1 id="css相关"><a class="header-anchor" href="#css相关" aria-hidden="true">#</a> CSS相关</h1><h2 id="_1-display-none-和visibility-hidden-的区别？"><a class="header-anchor" href="#_1-display-none-和visibility-hidden-的区别？" aria-hidden="true">#</a> 1. <code>display: none;</code>和<code>visibility: hidden;</code>的区别？</h2><ul><li>联系：他们都能让元素不可见；</li><li>区别： <ul><li><code>display: none;</code>会让元素完全从渲染树中消失，渲染的时候完全不占据任何空间；<code>visiblity: hidden;</code>不会让元素从渲染树中消失，渲染树元素继续占据空间，只是内容不可见。</li><li><code>display: none;</code>是非继承属性，子孙节点消失是因为元素从渲染树中消失造成的，通过修改子孙节点属性无法显示；<code>visibility: hidden;</code>是继承属性，子孙节点消失由于继承了<code>hidden</code>，通过设置<code>visibility: visible;</code>可以让子孙节点显示；</li><li>修改常规流中元素的<code>display</code>属性，通常会造成文档重排。修改<code>visibility</code>属性只会造成本元素的重绘；</li><li>读屏器不会读取<code>display: none;</code>元素的内容，会读取<code>visibility: hidden;</code>元素的内容。</li></ul></li></ul><h2 id="_2-浮动元素引起的问题"><a class="header-anchor" href="#_2-浮动元素引起的问题" aria-hidden="true">#</a> 2. 浮动元素引起的问题</h2><ul><li>父元素的高度无法被撑开，影响与父元素同级的元素</li><li>与浮动元素同级的非浮动元素会跟随其后</li></ul><h2 id="_3-css优化、提高性能的方法有哪些？"><a class="header-anchor" href="#_3-css优化、提高性能的方法有哪些？" aria-hidden="true">#</a> 3. CSS优化、提高性能的方法有哪些？</h2><ul><li>多个<code>css</code>合并，尽量减少<code>HTTP</code>请求；</li><li>将<code>css</code>文件尽量放在文档的最前面（放在<code>head</code>标签中）；</li><li>移除空的<code>css</code>；</li><li>选择器优化嵌套，尽量避免层级过深；</li><li>充分利用<code>css</code>继承属性，减少代码量；</li><li>抽象提取公共样式，减少代码量；</li><li>属性值为0时，不加单位；</li><li><code>css</code>雪碧图；</li><li>避免使用<code>css</code>表达式；</li><li>充分利用<code>css</code>继承属性，减少代码量；</li></ul><h2 id="_4-浏览器是怎样解析css选择器的？"><a class="header-anchor" href="#_4-浏览器是怎样解析css选择器的？" aria-hidden="true">#</a> 4. 浏览器是怎样解析CSS选择器的？</h2><p>浏览器解析 CSS 选择器的方式是从右到左；</p><div class="language-css"><pre><code><span class="token selector">.something div span</span> <span class="token punctuation">{</span>\n    <span class="token property">font-size</span><span class="token punctuation">:</span> 14px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><blockquote><p>解释：</p><ul><li>若是从左到右，上面的选择器会从<code>.something</code>开始，往下层遍历，如果遇到了不匹配的<code>div</code>，就要回溯到<code>.something</code>，然后再往下找，回溯若干次效率很低；</li><li>若是从右到左，先找到所有的最右节点<code>span</code>，然后向上寻找父节点<code>div</code>，然后由<code>div</code>向上寻找<code>.something</code>节点，就这样一步步去寻找匹配的父节点，最后找到根元素 <code>html</code>则结束这个分支的遍历。</li></ul></blockquote>',11);l.render=function(d,s,l,o,a,n){return e(),i("div",null,[c])};export default l;export{s as __pageData};
