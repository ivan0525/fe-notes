import{o as n,c as s,a}from"./app.026dfc65.js";const p='{"title":"Javascript相关","description":"","frontmatter":{"pageClass":"custom-page-class"},"headers":[{"level":2,"title":"1. 设计模式","slug":"_1-设计模式"},{"level":3,"title":"1.1 发布订阅（观察者模式）","slug":"_1-1-发布订阅（观察者模式）"},{"level":2,"title":"2. 常用工具函数","slug":"_2-常用工具函数"},{"level":3,"title":"2.1 防抖函数","slug":"_2-1-防抖函数"},{"level":3,"title":"2.2 Object.is polyfill","slug":"_2-2-object-is-polyfill"}],"relativePath":"js/index.md","lastUpdated":1621482303902}',t={},o=a('<h1 id="javascript相关"><a class="header-anchor" href="#javascript相关" aria-hidden="true">#</a> Javascript相关</h1><h2 id="_1-设计模式"><a class="header-anchor" href="#_1-设计模式" aria-hidden="true">#</a> 1. 设计模式</h2><h3 id="_1-1-发布订阅（观察者模式）"><a class="header-anchor" href="#_1-1-发布订阅（观察者模式）" aria-hidden="true">#</a> 1.1 发布订阅（观察者模式）</h3><div class="language-js"><pre><code><span class="token keyword">const</span> Event <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> clientList <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n    listen<span class="token punctuation">,</span>\n    trigger<span class="token punctuation">,</span>\n    remove<span class="token punctuation">;</span>\n  <span class="token function-variable function">listen</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">trigger</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">,</span>\n      fns <span class="token operator">=</span> clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fns <span class="token operator">||</span> fns<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> fn<span class="token punctuation">;</span> fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token function-variable function">remove</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> fns <span class="token operator">=</span> clientList<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fns<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      fns <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>fns<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> fns<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> _fn <span class="token operator">=</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>_fn <span class="token operator">===</span> fn<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          fns<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    listen<span class="token punctuation">,</span>\n    trigger<span class="token punctuation">,</span>\n    remove\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nEvent<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">&#39;SquareMeter88&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">price</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">//订阅消息</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">价格= </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>price<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// log: &#39;价格= 1999999&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nEvent<span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;SquareMeter88&#39;</span><span class="token punctuation">,</span> <span class="token number">1999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 发布消息</span>\n</code></pre></div><h2 id="_2-常用工具函数"><a class="header-anchor" href="#_2-常用工具函数" aria-hidden="true">#</a> 2. 常用工具函数</h2><h3 id="_2-1-防抖函数"><a class="header-anchor" href="#_2-1-防抖函数" aria-hidden="true">#</a> 2.1 防抖函数</h3><blockquote><p>防抖：让高频执行的动作在单位时间内只会执行一次，也就是说如果该动作在单位时间内再次触发，则重新就算时间。</p></blockquote><div class="language-ts"><pre><code><span class="token comment">/**\n * @description 防抖函数\n * @param {Function} func 需要包装的函数\n * @param {Number} delay 延迟时间，单位ms\n * @param {Boolean} immediate 是否立即执行\n * @returns {Function}\n */</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> debounce <span class="token operator">=</span> <span class="token punctuation">(</span>\n  func<span class="token operator">:</span> <span class="token builtin">Function</span><span class="token punctuation">,</span>\n  delay <span class="token operator">=</span> <span class="token number">300</span><span class="token punctuation">,</span>\n  immediate <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Function</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> timeout<span class="token operator">:</span> <span class="token keyword">null</span> <span class="token operator">|</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> setTimeout<span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token keyword">null</span>\n  <span class="token keyword">let</span> args<span class="token operator">:</span> <span class="token builtin">any</span>\n  <span class="token keyword">let</span> context<span class="token operator">:</span> <span class="token builtin">any</span>\n  <span class="token keyword">let</span> timestamp<span class="token operator">:</span> <span class="token builtin">number</span>\n  <span class="token keyword">let</span> result<span class="token operator">:</span> <span class="token builtin">Function</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">later</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 当前的时间戳与上一个时间戳做对比</span>\n    <span class="token keyword">const</span> left <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> timestamp\n    <span class="token comment">// 如果当前时间间隔小于设置的延迟时间且大于0就重置定时器</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> delay <span class="token operator">&amp;&amp;</span> left <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> delay <span class="token operator">-</span> left<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 清除定时器，执行回调</span>\n      timeout <span class="token operator">=</span> <span class="token keyword">null</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>immediate<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n        result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          context <span class="token operator">=</span> <span class="token keyword">null</span>\n          args <span class="token operator">=</span> <span class="token keyword">null</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    args <span class="token operator">=</span> arguments\n    <span class="token comment">// 获得时间戳</span>\n    timestamp <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token comment">// 如果定时器不存在且立即执行函数</span>\n    <span class="token keyword">var</span> callNow <span class="token operator">=</span> immediate <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>timeout\n    <span class="token comment">// 如果定时器不存在就创建一个</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>timeout<span class="token punctuation">)</span> timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>later<span class="token punctuation">,</span> delay<span class="token punctuation">)</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 如果需要立即执行函数的话 通过 apply 执行</span>\n      result <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n      context <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="_2-2-object-is-polyfill"><a class="header-anchor" href="#_2-2-object-is-polyfill" aria-hidden="true">#</a> 2.2 <code>Object.is</code> polyfill</h3><blockquote><p><code>Object.is</code> 方法用来判断两个值是否是同一个。（该方法与<code>===</code>几乎相同，区别在于前者对<code>NaN</code>和<code>+0</code>和<code>-0</code>进行了特殊处理）。</p></blockquote><div class="language-js"><pre><code><span class="token number">NaN</span> <span class="token operator">===</span> <span class="token number">NaN</span> <span class="token comment">// false</span>\n<span class="token operator">-</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">+</span><span class="token number">0</span> <span class="token comment">// true</span>\n<span class="token number">1</span><span class="token operator">/</span><span class="token operator">+</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token number">Infinity</span>\n<span class="token number">1</span><span class="token operator">/</span><span class="token operator">-</span><span class="token number">0</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">Infinity</span>\n<span class="token number">Infinity</span> <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">Infinity</span> <span class="token comment">// false</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">/**\n * polyfill Object.is\n * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n * @param {*} x \n * @param {*} y \n * @returns \n */</span>\n<span class="token keyword">function</span> <span class="token function">is</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> y <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token number">1</span> <span class="token operator">/</span> x <span class="token operator">!==</span> <span class="token number">1</span> <span class="token operator">/</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>x <span class="token operator">!==</span> x <span class="token operator">&amp;&amp;</span> y <span class="token operator">!==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">objectIs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">typeof</span> Object<span class="token punctuation">.</span>is <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">?</span> Object<span class="token punctuation">.</span>is <span class="token operator">:</span> is<span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>',12);t.render=function(a,p,t,e,c,l){return n(),s("div",null,[o])};export default t;export{p as __pageData};
