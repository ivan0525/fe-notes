import{o as n,c as s,a}from"./app.d9954252.js";const t='{"title":"","description":"","frontmatter":{},"relativePath":"js/react-source-code.md","lastUpdated":1622108316141}',p={},e=a('<ul><li>Example-1</li></ul><div class="language-ts"><pre><code><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>上例中的<code>useState</code>的初始化是在<code>packages/react-reconciler/src/ReactFiberHooks.new.js</code>中：</p><div class="language-ts"><pre><code><span class="token keyword">function</span> <span class="token generic-function"><span class="token function">mountState</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  initialState<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token constant">S</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token constant">S</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">S</span><span class="token punctuation">,</span> Dispatch<span class="token operator">&lt;</span>BasicStateAction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">]</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> hook <span class="token operator">=</span> <span class="token function">mountWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// useState传入的参数为函数，则执行该函数得出state，然后赋值给initialState</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> initialState <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// $FlowFixMe: Flow doesn&#39;t like mixed types</span>\n    initialState <span class="token operator">=</span> <span class="token function">initialState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  hook<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> hook<span class="token punctuation">.</span>baseState <span class="token operator">=</span> initialState<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token punctuation">(</span>hook<span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">{</span>\n    pending<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    interleaved<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    lanes<span class="token operator">:</span> NoLanes<span class="token punctuation">,</span>\n    dispatch<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    lastRenderedReducer<span class="token operator">:</span> basicStateReducer<span class="token punctuation">,</span>\n    lastRenderedState<span class="token operator">:</span> <span class="token punctuation">(</span>initialState<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> dispatch<span class="token operator">:</span> Dispatch<span class="token operator">&lt;</span>\n    BasicStateAction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  <span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>dispatch <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">dispatchAction</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>\n    <span class="token keyword">null</span><span class="token punctuation">,</span>\n    currentlyRenderingFiber<span class="token punctuation">,</span>\n    queue<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// Example-1中的setCount其实就是dispatchAction</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>hook<span class="token punctuation">.</span>memoizedState<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">mountWorkInProgressHook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Hook <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> hook<span class="token operator">:</span> Hook <span class="token operator">=</span> <span class="token punctuation">{</span>\n    memoizedState<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n\n    baseState<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    baseQueue<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 最新的状态信息</span>\n    queue<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 保持待更新的队列</span>\n\n    next<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token comment">// 指向下一个hook对象</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>workInProgressHook <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// This is the first hook in the list</span>\n    currentlyRenderingFiber<span class="token punctuation">.</span>memoizedState <span class="token operator">=</span> workInProgressHook <span class="token operator">=</span> hook<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Append to the end of the list</span>\n    workInProgressHook <span class="token operator">=</span> workInProgressHook<span class="token punctuation">.</span>next <span class="token operator">=</span> hook<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> workInProgressHook<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">function</span> dispatchAction<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>\n  fiber<span class="token operator">:</span> Fiber<span class="token punctuation">,</span>\n  queue<span class="token operator">:</span> UpdateQueue<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  action<span class="token operator">:</span> <span class="token constant">A</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在开发环境下，如果&#39;setXXX&#39;第三个参数传入了一个回调，会有错误提示；</span>\n    <span class="token comment">// 如果想拿到更新的状态去做其他事情，可以通过第一个参数传入一个函数，拿到最新的状态，然后做其他事情；</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> arguments<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>\n        <span class="token string">&quot;State updates from the useState() and useReducer() Hooks don&#39;t support the &quot;</span> <span class="token operator">+</span>\n          <span class="token string">&#39;second callback argument. To execute a side effect after &#39;</span> <span class="token operator">+</span>\n          <span class="token string">&#39;rendering, declare it in the component body with useEffect().&#39;</span><span class="token punctuation">,</span>\n      <span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> eventTime <span class="token operator">=</span> <span class="token function">requestEventTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> lane <span class="token operator">=</span> <span class="token function">requestUpdateLane</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> update<span class="token operator">:</span> Update<span class="token operator">&lt;</span><span class="token constant">S</span><span class="token punctuation">,</span> <span class="token constant">A</span><span class="token operator">&gt;</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n    lane<span class="token punctuation">,</span>\n    action<span class="token punctuation">,</span>\n    eagerReducer<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    eagerState<span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\n    next<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token keyword">null</span><span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> alternate <span class="token operator">=</span> fiber<span class="token punctuation">.</span>alternate<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>\n    fiber <span class="token operator">===</span> currentlyRenderingFiber <span class="token operator">||</span>\n    <span class="token punctuation">(</span>alternate <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> alternate <span class="token operator">===</span> currentlyRenderingFiber<span class="token punctuation">)</span>\n  <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// This is a render phase update. Stash it in a lazily-created map of</span>\n    <span class="token comment">// queue -&gt; linked list of updates. After this render pass, we&#39;ll restart</span>\n    <span class="token comment">// and apply the stashed updates on top of the work-in-progress hook.</span>\n    didScheduleRenderPhaseUpdateDuringThisPass <span class="token operator">=</span> didScheduleRenderPhaseUpdate <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> pending <span class="token operator">=</span> queue<span class="token punctuation">.</span>pending<span class="token punctuation">;</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>pending <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// This is the first update. Create a circular list.</span>\n      update<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      update<span class="token punctuation">.</span>next <span class="token operator">=</span> pending<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n      pending<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    queue<span class="token punctuation">.</span>pending <span class="token operator">=</span> update<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInterleavedUpdate</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> interleaved <span class="token operator">=</span> queue<span class="token punctuation">.</span>interleaved<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>interleaved <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// This is the first update. Create a circular list.</span>\n        update<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>\n        <span class="token comment">// At the end of the current render, this queue&#39;s interleaved updates will</span>\n        <span class="token comment">// be transfered to the pending queue.</span>\n        <span class="token function">pushInterleavedQueue</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        update<span class="token punctuation">.</span>next <span class="token operator">=</span> interleaved<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        interleaved<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      queue<span class="token punctuation">.</span>interleaved <span class="token operator">=</span> update<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> pending <span class="token operator">=</span> queue<span class="token punctuation">.</span>pending<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>pending <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">// This is the first update. Create a circular list.</span>\n        update<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        update<span class="token punctuation">.</span>next <span class="token operator">=</span> pending<span class="token punctuation">.</span>next<span class="token punctuation">;</span>\n        pending<span class="token punctuation">.</span>next <span class="token operator">=</span> update<span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n      queue<span class="token punctuation">.</span>pending <span class="token operator">=</span> update<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>\n      fiber<span class="token punctuation">.</span>lanes <span class="token operator">===</span> NoLanes <span class="token operator">&amp;&amp;</span>\n      <span class="token punctuation">(</span>alternate <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> alternate<span class="token punctuation">.</span>lanes <span class="token operator">===</span> NoLanes<span class="token punctuation">)</span>\n    <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// The queue is currently empty, which means we can eagerly compute the</span>\n      <span class="token comment">// next state before entering the render phase. If the new state is the</span>\n      <span class="token comment">// same as the current state, we may be able to bail out entirely.</span>\n      <span class="token keyword">const</span> lastRenderedReducer <span class="token operator">=</span> queue<span class="token punctuation">.</span>lastRenderedReducer<span class="token punctuation">;</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRenderedReducer <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> prevDispatcher<span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          prevDispatcher <span class="token operator">=</span> ReactCurrentDispatcher<span class="token punctuation">.</span>current<span class="token punctuation">;</span>\n          ReactCurrentDispatcher<span class="token punctuation">.</span>current <span class="token operator">=</span> InvalidNestedHooksDispatcherOnUpdateInDEV<span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">try</span> <span class="token punctuation">{</span>\n          <span class="token keyword">const</span> currentState<span class="token operator">:</span> <span class="token constant">S</span> <span class="token operator">=</span> <span class="token punctuation">(</span>queue<span class="token punctuation">.</span>lastRenderedState<span class="token operator">:</span> any<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token keyword">const</span> eagerState <span class="token operator">=</span> <span class="token function">lastRenderedReducer</span><span class="token punctuation">(</span>currentState<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n          <span class="token comment">// Stash the eagerly computed state, and the reducer used to compute</span>\n          <span class="token comment">// it, on the update object. If the reducer hasn&#39;t changed by the</span>\n          <span class="token comment">// time we enter the render phase, then the eager state can be used</span>\n          <span class="token comment">// without calling the reducer again.</span>\n          update<span class="token punctuation">.</span>eagerReducer <span class="token operator">=</span> lastRenderedReducer<span class="token punctuation">;</span>\n          update<span class="token punctuation">.</span>eagerState <span class="token operator">=</span> eagerState<span class="token punctuation">;</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is</span><span class="token punctuation">(</span>eagerState<span class="token punctuation">,</span> currentState<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token comment">// Fast path. We can bail out without scheduling React to re-render.</span>\n            <span class="token comment">// It&#39;s still possible that we&#39;ll need to rebase this update later,</span>\n            <span class="token comment">// if the component re-renders for a different reason and by that</span>\n            <span class="token comment">// time the reducer has changed.</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token comment">// Suppress the error. It will throw again in the render phase.</span>\n        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n          <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            ReactCurrentDispatcher<span class="token punctuation">.</span>current <span class="token operator">=</span> prevDispatcher<span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// $FlowExpectedError - jest isn&#39;t a global, and isn&#39;t recognized outside of tests</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">&#39;undefined&#39;</span> <span class="token operator">!==</span> <span class="token keyword">typeof</span> jest<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token function">warnIfNotScopedWithMatchingAct</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token function">warnIfNotCurrentlyActingUpdatesInDev</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">const</span> root <span class="token operator">=</span> <span class="token function">scheduleUpdateOnFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> eventTime<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isTransitionLane</span><span class="token punctuation">(</span>lane<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> root <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">let</span> queueLanes <span class="token operator">=</span> queue<span class="token punctuation">.</span>lanes<span class="token punctuation">;</span>\n\n      <span class="token comment">// If any entangled lanes are no longer pending on the root, then they</span>\n      <span class="token comment">// must have finished. We can remove them from the shared queue, which</span>\n      <span class="token comment">// represents a superset of the actually pending lanes. In some cases we</span>\n      <span class="token comment">// may entangle more than we need to, but that&#39;s OK. In fact it&#39;s worse if</span>\n      <span class="token comment">// we *don&#39;t* entangle when we should.</span>\n      queueLanes <span class="token operator">=</span> <span class="token function">intersectLanes</span><span class="token punctuation">(</span>queueLanes<span class="token punctuation">,</span> root<span class="token punctuation">.</span>pendingLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n      <span class="token comment">// Entangle the new transition lane with the other transition lanes.</span>\n      <span class="token keyword">const</span> newQueueLanes <span class="token operator">=</span> <span class="token function">mergeLanes</span><span class="token punctuation">(</span>queueLanes<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      queue<span class="token punctuation">.</span>lanes <span class="token operator">=</span> newQueueLanes<span class="token punctuation">;</span>\n      <span class="token comment">// Even if queue.lanes already include lane, we don&#39;t know for certain if</span>\n      <span class="token comment">// the lane finished since the last time we entangled it. So we need to</span>\n      <span class="token comment">// entangle it again, just to be sure.</span>\n      <span class="token function">markRootEntangled</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> newQueueLanes<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>__DEV__<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>enableDebugTracing<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>fiber<span class="token punctuation">.</span>mode <span class="token operator">&amp;</span> DebugTracingMode<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getComponentNameFromFiber</span><span class="token punctuation">(</span>fiber<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">&#39;Unknown&#39;</span><span class="token punctuation">;</span>\n        <span class="token function">logStateUpdateScheduled</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> lane<span class="token punctuation">,</span> action<span class="token punctuation">)</span><span class="token punctuation">;</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>enableSchedulingProfiler<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">markStateUpdateScheduled</span><span class="token punctuation">(</span>fiber<span class="token punctuation">,</span> lane<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div>',5);p.render=function(a,t,p,o,c,u){return n(),s("div",null,[e])};export default p;export{t as __pageData};
