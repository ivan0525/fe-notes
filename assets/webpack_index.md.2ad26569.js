import{o as e,c as a,a as d}from"./app.a2fcf4d3.js";const o='{"title":"Webpack相关","description":"","frontmatter":{},"headers":[{"level":3,"title":"loaders","slug":"loaders"}],"relativePath":"webpack/index.md","lastUpdated":1629389028959}',r={},l=d('<h1 id="webpack相关"><a class="header-anchor" href="#webpack相关" aria-hidden="true">#</a> Webpack相关</h1><h3 id="loaders"><a class="header-anchor" href="#loaders" aria-hidden="true">#</a> <code>loaders</code></h3><p>在webpack中使用<code>loader</code>来对模块的源代码进行转换，而<code>loader</code>的本质其实就是一个nodejs模块。</p><h4 id="loader编写原则"><a class="header-anchor" href="#loader编写原则" aria-hidden="true">#</a> <code>loader</code>编写原则</h4><ul><li>单一原则：每个<code>loader</code>只做一件事；</li><li>链式调用：<code>webpack</code>会按顺序链式调用每个<code>loader</code>；</li><li>模块化：<code>loader</code>生成的模块与普通模块遵循相同的设计原则；</li><li>无状态：确保 loader 在不同模块转换之间不保存状态。每次运行都应该独立于其他编译模块以及相同模块之前的编译结果；</li></ul>',5);r.render=function(d,o,r,c,i,t){return e(),a("div",null,[l])};export default r;export{o as __pageData};
